# This is a sample Vroom input file. It should help you get started.
#
# Edit this file with your content. Then run `vroom vroom` to start
# the show!
#
# See `perldoc Vroom` for complete details.
#
---- config
# Basic config options.
title: JavaScript on Vim
indent: 5
auto_size: 0
height: 24
width: 80
vim_opts: '-u NONE'
skip: 0

vimrc: |
  set nowrap
  map Q <Nop>

  autocmd VimEnter,BufRead \d\+\l\= syntax match slideLink        "http[^ ]\+"
  autocmd VimEnter,BufRead \d\+\l\= syntax match slideStar        "^\s*\zs\*"
  autocmd VimEnter,BufRead \d\+\l\= syntax match slideVimTag      "<.*>"
  autocmd VimEnter,BufRead \d\+\l\= syntax match slideVimCommand  " :[a-zA-Z-]\+\>" skipwhite nextgroup=slideVimCommandArg
  autocmd VimEnter,BufRead \d\+\l\= syntax match slideVimCommandArg  "[.:0-9a-z_-]\+" contained
  autocmd VimEnter,BufRead \d\+\l\= syntax match slideCommand     "`.\{-}`"
  autocmd VimEnter,BufRead \d\+\l\= syntax match slideStringQuote "'.\{-}'" contains=slideString
  autocmd VimEnter,BufRead \d\+\l\= syntax match slideStringQuote '".\{-}"' contains=slideString
  autocmd VimEnter,BufRead \d\+\l\= syntax match slideString      '[^'"]*' contained
  autocmd VimEnter,BufRead \d\+\l\= syntax match slideEnhanced    "\*\w\+\*" transparent
  autocmd VimEnter,BufRead \d\+\l\= syntax match slideShipName    "\(*\s\|\.\s\+\|^\s*\|:\)\@<!\zs\<\u\h\+"
  autocmd VimEnter,BufRead \d\+\l\= syntax match slideShipName    "\(\u\l\+\)\{2,}"
  autocmd VimEnter,BufRead \d\+\l\= syntax match slideShipName    "\<\u[A-Z0-9_]\+\>"
  autocmd VimEnter,BufRead \d\+\l\= syntax match slideShipName    "Tern\|Vimball\|Vim\|\.vimrc"
  autocmd VimEnter,BufRead \d\+\l\= syntax match slideShipName    "Learn Vimscript the Hard Way"
  autocmd VimEnter,BufRead \d\+\l\= syntax match slideVimPlugin   "\<[a-zA-Z]\+\/[a-zA-Z-.]\+\>"
  autocmd VimEnter,BufRead \d\+\l\= syntax match slideVimPlugin   "\<[A-Za-z-0-9]\+\.vim\>"
  autocmd VimEnter,BufRead \d\+\l\= syntax match slideVimPlugin   "\<vim-[a-z-0-9]\+\>"
  autocmd VimEnter,BufRead \d\+\l\= syntax match slideVimPlugin   "Syntastic\|neocomplcache\|AutoComplPop\|SuperTab"
  autocmd VimEnter,BufRead \d\+\l\= syntax match slideTitle       "\%^\_[ ]* \{10,}\S.*" contains=slideTitleFix
  autocmd VimEnter,BufRead \d\+\l\= syntax match slideTitleFix    "_"
  autocmd VimEnter,BufRead \d\+\l\= syntax keyword slideWord      Gentlemen
  hi Normal ctermfg=231
  hi slideTitle ctermfg=172
  hi slideVimPlugin ctermfg=82
  hi slideLink cterm=underline ctermfg=33
  hi slideString cterm=underline
  hi slideStar ctermfg=226
  hi slideEnhanced cterm=bold ctermfg=231
  hi slideShipName cterm=bold ctermfg=123
  hi slideVimTag ctermfg=4
  hi slideVimCommand ctermfg=33
  hi slideVimCommandArg ctermfg=39
  hi slideCommand ctermfg=4
  hi slideTitleFix ctermfg=16


---- center

JavaScript on Vim

by othree

----
== Slide Source


* https://github.com/othree/javascript-on-vim-slide/

----
== me


* othree

+* on Github, Flickr, Twitter

+* F2E at HTC

+* Maintains some Vim plugin

----
== Agenda


+* What plugin I use as a F2E

+* Big problem about JavaScript syntax

+* The eco system of Vim community

+* Problems I face while maintain these projects

+* How to get familiar with Vim Script

---- viml,i4

----
== My Vim Repos
 

* https://github.com/search?q=%40othree&type=Repositories&l=VimL

+* html5.vim

+* javascript-syntax.vim
+* javascript-libraries-syntax.vim

+* jslint.vim
* coffee-check.vim

+* eregex.vim
+* vim-autocomplpop

----
== Other Plugins


+* teramako/jscomplete.vim

+* garbas/vim-snipmate

+* scrooloose/Syntastic

----
== html5.vim


* 291 ★

* Build this for personal need

* But no more need when I complete it

----

---- center
Syntax

----
== Syntax File for JavaScript


* Have built in version

* Vim 7.3 introduce SyntaxComplete

* Not work with javascript... Why?

---- center
  
Look Into SyntaxComplete

---- viml,i4

while ftindex > -1
    let ft_part_name = matchstr( &filetype, '\w\+', ftindex )

    " Syntax rules can contain items for more than just the current
    " filetype.  They can contain additional items added by the user
    " via autocmds or their vimrc.
    " Some syntax files can be combined (html, php, jsp).
    " We want only items that begin with the filetype we are interested in.
    let next_group_regex = '\n' .
                \ '\zs'.ft_part_name.'\w\+\ze'.
                \ '\s\+xxx\s\+'
    let index    = 0
    let index    = match(syntax_full, next_group_regex, index)

    if index == -1 && exists('b:current_syntax') && ft_part_name != b:current_syntax
        " There appears to be two standards when writing syntax files.
        " Either items begin as:
        "     syn keyword {filetype}Keyword         values ...
        "     let b:current_syntax = "sql"
        "     let b:current_syntax = "sqlanywhere"
        " Or
        "     syn keyword {syntax_filename}Keyword  values ...
        "     let b:current_syntax = "mysql"
        " So, we will make the format of finding the syntax group names
        " a bit more flexible and look for both if the first fails to
        " find a match.
        let next_group_regex = '\n' .
                    \ '\zs'.b:current_syntax.'\w\+\ze'.
                    \ '\s\+xxx\s\+'
        let index    = 0
        let index    = match(syntax_full, next_group_regex, index)
    endif

---- center

How About JavaScript Syntax

---- viml,i4

if version >= 508 || !exists("did_javascript_syn_inits")
  if version < 508
    let did_javascript_syn_inits = 1
    command -nargs=+ HiLink hi link <args>
  else
    command -nargs=+ HiLink hi def link <args>
  endif
  HiLink javaScriptComment              Comment
  HiLink javaScriptLineComment          Comment
  HiLink javaScriptCommentTodo          Todo
  HiLink javaScriptSpecial              Special
  HiLink javaScriptStringS              String
  HiLink javaScriptStringD              String
  HiLink javaScriptCharacter            Character
  HiLink javaScriptSpecialCharacter     javaScriptSpecial
  HiLink javaScriptNumber               javaScriptValue
  HiLink javaScriptConditional          Conditional
  HiLink javaScriptRepeat               Repeat
  HiLink javaScriptBranch               Conditional
  HiLink javaScriptOperator             Operator
  HiLink javaScriptType                 Type
  HiLink javaScriptStatement            Statement
  HiLink javaScriptFunction             Function
  HiLink javaScriptBraces               Function
  HiLink javaScriptError                Error
  HiLink javaScrParenError              javaScriptError
  HiLink javaScriptNull                 Keyword
  HiLink javaScriptBoolean              Boolean
  HiLink javaScriptRegexpString         String

---- center

'javaScript' vs 'javascript'

---- javascript

// Are they the same?
print('javascript' === 'javaScript');

---- i-4
== *44.12*  Portable syntax file layout


* :help 44.12

Choose a good, descriptive name for your syntax file.  Use lowercase letters
and digits.  Don't make it too long, it is used in many places: The name of
the syntax file "name.vim", 'filetype', b:current_syntax and the start of each
syntax group (nameType, nameStatement, nameString, etc).

---- center

_ㄜ....

---- 
== _______上樑不正下梁歪


+* Almost all other JavaScript syntax use *javaScript*

+* TypeScript syntax use *typeScript*

---- 
== More Worse


+* I'm writing javascript-libraries-syntax.vim

+* Hard use automation to port my syntax to CoffeeScript and LiveScript
+  * CoffeeScript: *coffee*
+  * LiveScript: *ls*

----
== To Solve This


+* Contact to author of SyntaxComplete

+* Contact to author of TypeScript syntax file

+* Contact to vimdev

+* Walk around for my libraries syntax

---- center
The Walk Around Solution

---- sh,i4

> ls javascript-libraries-syntax.vim/autoload/syntax/*
+
angularjs.coffee.vim
angularjs.javascript.vim
angularjs.ls.vim
angularjs.typescript.vim
jquery.coffee.vim
jquery.javascript.vim
jquery.ls.vim
jquery.typescript.vim
postprocess.coffee.vim
postprocess.javascript.vim
postprocess.ls.vim
postprocess.typescript.vim
prelude.coffee.vim
prelude.javascript.vim
prelude.ls.vim
prelude.typescript.vim
update.sh

----
== Responses


+* SyntaxComplete author David Fishburn build a new version (13)

+* TypeScript syntax author say he will take a look

+* User can assign custom rule for syntax group name
  Great for my libraries syntax project

+* Response from vimdev...
+  * Report to the author of the syntax file

+* So I start host my *javascript-syntax.vim*


----

---- center

Complete

----
== OmniComplete

* Need a little configure

---- viml,i4

autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS

----

* Then press <C-X><C-O>

----
== Default JS Complete Function


+* Out of date

+* I use *jscomplete.vim*

---- viml,i4

autocmd FileType javascript set omnifunc=jscomplete#CompleteJS

----

* Difficult to press <C-X><C-O>

+* Alternative, you can use:
+  * SuperTab
+  * AutoComplPop
+  * neocomplcache

----
== AutoComplPop


* Automatically trigger <C-X><C-O>

+* Author not maintains anymore

+* Don't have default setting for JavaScript

---- viml,i4

let behavs = { 'javascript': [], 'html': [] }
    call add(behavs.javascript, {
        \   'command'      : "\<C-x>\<C-u>",
        \   'completefunc' : 'acp#completeSnipmate',
        \   'meets'        : 'acp#meetsForSnipmate',
        \   'onPopupClose' : 'acp#onPopupCloseSnipmate',
        \   'repeat'       : 0,
    \})
    call add(behavs.javascript, {
        \   'command' : g:acp_behaviorKeywordCommand,
        \   'meets'   : 'acp#meetsForKeyword',
        \   'repeat'  : 0,
        \ })
    call add(behavs.javascript, {
        \   'command' : "\<C-x>\<C-o>",
        \   'meets'   : 'AcpMeetsForJavaScript',
        \   'repeat'  : 0,
    \})

let g:acp_behavior = {}
call extend(g:acp_behavior, behavs, 'keep')

---- center

_ㄜ....

---- center

Maintain my own AutoComplPop

----
== My AutoComplPop


+* Add more filetype default support

+* Supports snipmate again

----
== What happened with snipmate


+* Author don't maintains....


----
== But


+* A new fork on Github by Rok Garbas, Marc Weber, and Adnan Zafar

+* Breaks old way to work with AutoComplPop

+* So I fixed it


+* https://blog.othree.net/log/2013/06/25/autocomplpop-and-snipmate/

----
== The Old Vim EcoSystem


+* Vim Scripts

+* Move file by hand

+* Vimball file

----
== The Vim EcoSystem Changes


+* pathogen.vim by Tim Pope

+* Not depends on Git, HG ...etc
  But work very well with them

+* I use Vundle, it depends on Github

+* More and more Vim plugin only exists on Github or other repo sites
+  * ex: garbas/vim-snipmates
+        othree/vim-autocomplpop    

----
== The pathogen Way


+* Separate all plugins

+* No more mass in .vim folder

+* Uninstall plugins never hard

+* Update all plugins automatically

---- center

Thanks You, Tim Pope !!

----
== Last Slide for Complete


* Imaging the complete funcion in IDE

+* Tern: http://ternjs.net/


+* But I am writing CoffeeScript now.....

+* Tell us if you have experience on Tern

---- center

lint


----
== JSLint


* JSLint.vim

+* Not update JSLint often

+* Host my own to fix this issue

+* Also try use JSHint

+* Then I starts write CoffeeScript...

----
== CoffeeCheck.vim


+* Based on JSLint.vim

+* Use CoffeeScript compiler to do syntax check 

+* Only one error per time

+* Only syntax check, not lint

+* CoffeeLint borns....

----
== CoffeeLint.vim ?


+* ...

+* Ladies and Gentlemen,
+  let me introduce ...

---- html,i-8

              / \,,_  .'|
           ,{{| /}}}}/_.'            _____________________________________________
          }}}}` '{{'  '.            /                                             \
        {{{{{    _   ;, \          /            Ladies and Gentlemen,              \
     ,}}}}}}    /o`\  ` ;)        |                                                |
    {{{{{{   /           (        |                 this is ...                    |
    }}}}}}   |            \       |                                                |
   {{{{{{{{   \            \      |                                                |
   }}}}}}}}}   '.__      _  |     |    _____             __             __  _      |
   {{{{{{{{       /`._  (_\ /     |   / ___/__  ______  / /_____ ______/ /_(_)____ |
    }}}}}}'      |    //___/   --=:   \__ \/ / / / __ \/ __/ __ `/ ___/ __/ / ___/ |
jgs `{{{{`       |     '--'       |  ___/ / /_/ / / / / /_/ /_/ (__  ) /_/ / /__   |
     }}}`                         | /____/\__, /_/ /_/\__/\__,_/____/\__/_/\___/   |
                                  |      /____/                                    |
                                  |                                               /
                                   \_____________________________________________/

----
== Syntastic


+* General syntax checker interface

+* filetype vs multiple checker

+* Supports JavaScript, CoffeeScript...etc

+* CoffeeScript supports CoffeeScript Compiler and CoffeeLint ...
+  by default

+* https://blog.othree.net/log/2013/06/21/syntastic-coffeelint/

----

---- center

The Vim Document

----

* Let's start from find command `/`

+* It supports regular expression

+* Vim's Regular Expression

----
== Vim's Regular Expression


+* http://vimdoc.sourceforge.net/htmldoc/pattern.html


+* Very different from other RegExp

+* Very different from JavaScript's RegExp

----
== For Example


+* Do you know `\zs` ?

+* Do you know `\w` still works ?

+* Do you know `[\w]` is not what you think ?


+* What if I want a familiar RegExp format, like Perl or JavaScript
+  * Ack.vim
+  * eregex.vim

----
== eregex.vim


* Translate Perl style RegExp to Vim's format


+* Author: 安久津

+* Disappeared...

+* I start to host my own...

----
== Bugs


+* Do you know is is ok to find third item by `3/`

+* Do you know when count > 1, highlight will enable

+* Do you know there is a backword search `?`


+* eregex.vim can't do every thing above...

----
== The Count Parameter


* :help command-count

----

Range handling                          E177 E178 :command-range
                                                        :command-count
By default, user-defined commands do not accept a line number range.  However,
it is possible to specify that the command does take a range (the -range
attribute), or that it takes an arbitrary count value, either in the line
number position (-range=N, like the :split command) or as a "count"
argument (-count=N, like the :Next command).  The count will then be
available in the argument with <count>.

Possible attributes are:

        -range      Range allowed, default is current line
        -range=%    Range allowed, default is whole file (1,$)
        -range=N    A count (default N) which is specified in the line
                    number position (like :split); allows for zero line
                    number.
        -count=N    A count (default N) which is specified either in the line
                    number position, or as an initial argument (like :Next).
                    Specifying -count (without a default) acts like -count=0

Note that -range=N and -count=N are mutually exclusive - only one should be
specified.

----
== Easy~~~


+* How about the backward search and highlight

---- viml,i1

-   if delim !=# '/'

++   if delim !=# '/' && delim !=# '?' 


---- center,replace
Piece of Cake ~~

+Not
+Not Work
+Not Work at All !!!!

---- center
Don't Know Why

---- center
20 months later...

----

* :help function-search-undo

                                                function-search-undo
                        The last used search pattern and the redo command "."
                        will not be changed by the function.  This also
                        implies that the effect of :nohlsearch is undone
                        when the function returns.

----

+* OK

+* Close issue, impossible to fix

---- center

One Month Later

----

* Something *wrong* on me

+* Keep looking at Vim resource and document

+* I found `v:searchforward`

----

* :help v:searchforward


+v:searchforward            *v:searchforward* *searchforward-variable*
        Search direction:  1 after a forward search, 0 after a
        backward search.  It is reset to forward when directly setting
        the last search pattern, see |quote/|.
        Note that the value is restored when returning from a
        function. |function-search-undo|.
        Read-write.

----

* `v:searchforward` is what been reset when leave function

* Another one been reset is `hlsearch`

* How could I set it on my custom command

---- viml,i1

-command! -nargs=? M :call <SID>Ematch(<q-args>)

++command! -nargs=? -count M :let v:searchforward = <SID>Ematch(<q-args>)

---- center

Highlight ?

---- viml,i1

-command! -nargs=? -count=0 M :let v:searchforward = <SID>Ematch(<count>, <q-args>)

++command! -nargs=? -count=1 M :let v:searchforward = 
\    <SID>Ematch(<count>, <q-args>) | if <count> > 1 | set hlsearch on | endif

----
== So...


* How could I fix this two year long life bug?

+* Vim have great document

+* It documents almost every detail in Vim

+* If you want write Vim Script or Plugin

+* You must learn how to read & search in the document


----
== But


+* Bad SEO, hard to see it in search results

+* You need know the correct keyword

----
== Suggestion


+* Use `:help keyword` first

+* Add 'vim', 'doc' to your keywords when search on web

+* Search in vim doc directly


* http://vimdoc.sourceforge.net/htmldoc/help.html

----
== Reading

* Learn Vimscript the Hard Way
  http://learnvimscriptthehardway.stevelosh.com/

* My .vimrc
  https://github.com/othree/rc/blob/master/home/.vimrc

---- center
Questions?

---- center
Thank you

---- center
The End
